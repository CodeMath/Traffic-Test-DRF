# Django Settings
DJANGO_SETTINGS_MODULE=config.production
SECRET_KEY=your-secret-key-here
DEBUG=False
ALLOWED_HOSTS=*

# Database Configuration (Docker 환경 - 컨테이너 이름 사용)
DB_HOST=postgresql_db
DB_NAME=traffic_test
DB_USER=postgres
DB_PASSWORD=DATABASSE_PSW
DB_PORT=5432

# Redis Configuration
REDIS_URL=redis://redis:6379/0
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# ===========================================
# Gunicorn Worker Configuration
# ===========================================

# Worker class: gthread (multi-threaded) or gevent (async/coroutine)
WORKER_CLASS=gthread

# Number of worker processes
# Recommendation: (2 × CPU_cores) + 1
WORKERS=3

# For gthread: number of threads per worker
THREADS=3

# For gevent: number of concurrent connections per worker
WORKER_CONNECTIONS=1000

# Worker lifecycle settings
MAX_REQUESTS=1200
MAX_REQUESTS_JITTER=50
TIMEOUT=30
GRACEFUL_TIMEOUT=30
KEEP_ALIVE=5

# Logging
LOG_LEVEL=info

# Server binding
BIND_ADDRESS=0.0.0.0:8882

# ===========================================
# Performance Tuning Guide
# ===========================================
#
# 🔥 For I/O-bound workloads (재고 예약 시스템 같은 DB 집약적 작업):
#   WORKER_CLASS=gevent
#   WORKERS=3
#   WORKER_CONNECTIONS=1000
#   → Total capacity: 3,000 concurrent connections
#   → Expected performance: 2-4x improvement
#
# 🔧 For CPU-bound workloads or maximum compatibility:
#   WORKER_CLASS=gthread
#   WORKERS=3
#   THREADS=3
#   → Total capacity: 9 concurrent threads
#   → Standard performance with better stability
#
# 💡 Worker count recommendation:
#   WORKERS = (2 × CPU_cores) + 1
#   For 4-core system: WORKERS=9
#
# 💾 Memory considerations:
#   gthread: ~150-200MB per worker
#   gevent:  ~100-150MB per worker
#
# ⚠️ Note: gevent requires 'gevent' package
#   poetry add gevent